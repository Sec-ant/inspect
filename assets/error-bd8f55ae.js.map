{"version":3,"file":"error-bd8f55ae.js","sources":["../../src/utils/error.ts"],"sourcesContent":["import { message } from '@/utils/discrete';\n\nexport const errorWrap = <T>(\n  getter: () => T,\n  catchHandler?: ((e: unknown) => unknown) | string,\n  finallyHandler?: () => void,\n) => {\n  try {\n    return getter();\n  } catch (e) {\n    if (typeof catchHandler == 'string') {\n      message.error(catchHandler);\n    } else {\n      const error = catchHandler?.(e) ?? e;\n      if (typeof error == 'string') {\n        message.error(error);\n      } else if (error instanceof Error) {\n        message.error(error.message);\n      }\n    }\n    throw e;\n  } finally {\n    finallyHandler?.();\n  }\n};\n\nexport const errorTry = <T extends (...args: any[]) => any>(fn: T) => {\n  return (...args: Parameters<T>) => {\n    try {\n      fn(...args);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n};\n"],"names":["errorWrap","getter","catchHandler","finallyHandler","e","message","error","errorTry","fn","args"],"mappings":"0CAEO,MAAMA,EAAY,CACvBC,EACAC,EACAC,IACG,CACC,GAAA,CACF,OAAOF,EAAO,QACPG,GACH,GAAA,OAAOF,GAAgB,SACzBG,EAAQ,MAAMH,CAAY,MACrB,CACC,MAAAI,GAAQJ,GAAA,YAAAA,EAAeE,KAAMA,EAC/B,OAAOE,GAAS,SAClBD,EAAQ,MAAMC,CAAK,EACVA,aAAiB,OAClBD,EAAA,MAAMC,EAAM,OAAO,EAGzB,MAAAF,CAAA,QACN,CACiBD,GAAA,MAAAA,GACnB,CACF,EAEaI,EAA+CC,GACnD,IAAIC,IAAwB,CAC7B,GAAA,CACFD,EAAG,GAAGC,CAAI,QACHL,GACP,QAAQ,MAAMA,CAAC,CACjB,CAAA"}